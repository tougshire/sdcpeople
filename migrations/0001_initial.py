# Generated by Django 4.0.3 on 2022-03-15 17:34

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='LocationBorough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Borough',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LocationCongress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Congressional District',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LocationMagistrate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Magisterial District',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LocationPrecinct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Precinct',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LocationStateHouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'House of Delegates District',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LocationStateSenate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'State Senatorial District',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MembershipApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_date', models.DateField(blank=True, help_text='The date that the application was signed or submitted', null=True, verbose_name='date of application')),
            ],
        ),
        migrations.CreateModel(
            name='MembershipStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of this membership status', max_length=100, verbose_name='name')),
                ('is_quorum', models.BooleanField(default=False, help_text='If this type of membership count as a quorum (along with appropriate membership type)', verbose_name='is quorum')),
                ('can_vote', models.BooleanField(default=False, help_text='If members of this status can vote (along with appropriate membership type)', verbose_name='can vote')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MembershipType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of this membership type', max_length=100, verbose_name='name')),
                ('is_quorum', models.BooleanField(default=False, help_text='If this type of membership count as a quorum', verbose_name='is quorum')),
                ('is_member', models.BooleanField(default=False, help_text='If members of this type are counted as members of the committee (along with appropriate status)', verbose_name='is member')),
                ('can_vote', models.BooleanField(default=False, help_text='If members of this type can vote (along with appropriate status)', verbose_name='can vote')),
                ('pays_dues', models.BooleanField(default=False, help_text='If the members of this type pay dues', verbose_name='pays dues')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the method of payment', max_length=50, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_last', models.CharField(help_text="The person's last name", max_length=100, verbose_name='last name')),
                ('name_first', models.CharField(blank=True, help_text="The person's first name", max_length=100, verbose_name='first name')),
                ('name_middles', models.CharField(blank=True, help_text="The person's middle names", max_length=100, verbose_name='middle names')),
                ('name_common', models.CharField(blank=True, help_text='The name that this person uses in place of a first name', max_length=100, verbose_name='friendly name')),
            ],
        ),
        migrations.CreateModel(
            name='SubCommittee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The committee name', max_length=100, verbose_name='name')),
                ('rank', models.IntegerField(default=1000, help_text='A number representing the placement of this committee on a list - default 1000 and any lower number(0,1,2 etc) is higher on the list', verbose_name='list rank')),
            ],
            options={
                'ordering': ['rank', 'name'],
            },
        ),
        migrations.CreateModel(
            name='VotingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locationborough', models.ForeignKey(blank=True, help_text="The person's borough", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.locationborough')),
                ('locationcongress', models.ForeignKey(blank=True, help_text="The person's congressional district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.locationcongress')),
                ('locationcstatesenate', models.ForeignKey(blank=True, help_text="The person's state senatorial district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.locationstatesenate')),
                ('locationmagestrate', models.ForeignKey(blank=True, help_text="The person's magisterial district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.locationmagistrate')),
                ('locationprecinct', models.ForeignKey(blank=True, help_text="The person's precinct", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.locationprecinct')),
                ('locationstatehouse', models.ForeignKey(blank=True, help_text="The person's house of delegates district", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.locationstatehouse')),
            ],
        ),
        migrations.CreateModel(
            name='SubMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text="The title of this person's position in the subcommittee", max_length=100, verbose_name='title')),
                ('rank', models.IntegerField(default=1000, help_text='A number representing the placement of this person in a list of subcommittee members - default 1000 and any lower number(0,1,2 etc) is higher on the list', verbose_name='list rank')),
                ('person', models.ForeignKey(help_text='The person who is a member of a subcommittee', on_delete=django.db.models.deletion.CASCADE, to='sdcpeople.person')),
                ('subcommittee', models.ForeignKey(help_text='The committee in which the person is a member', on_delete=django.db.models.deletion.CASCADE, to='sdcpeople.subcommittee')),
            ],
        ),
        migrations.AddField(
            model_name='person',
            name='subcommittee',
            field=models.ManyToManyField(help_text='The sub-committees in which this person is a member', through='sdcpeople.SubMembership', to='sdcpeople.subcommittee'),
        ),
        migrations.AddField(
            model_name='person',
            name='voting_address',
            field=models.ForeignKey(blank=True, help_text="The person's voting adress", null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.votingaddress'),
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='The starting date for this membership', verbose_name='effective date')),
                ('membership_status', models.ForeignKey(help_text='The status of membership for this period', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.membershipstatus')),
                ('membership_type', models.ForeignKey(help_text='The type of membership for this period', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.membershiptype')),
                ('person', models.ForeignKey(help_text='The person to whom this membership applies', on_delete=django.db.models.deletion.CASCADE, to='sdcpeople.person')),
            ],
        ),
        migrations.CreateModel(
            name='DuesPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_date', models.DateField(blank=True, help_text='The date of the payment transaction', null=True, verbose_name='date of transaction')),
                ('effective_date', models.DateField(blank=True, help_text='The effective date of the payment', null=True, verbose_name='date of transaction')),
                ('method', models.ForeignKey(blank=True, help_text='The method of payment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sdcpeople.paymentmethod')),
            ],
        ),
        migrations.CreateModel(
            name='ContactVoicePhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='The phone number', max_length=50, verbose_name='number')),
                ('extra', models.CharField(blank=True, help_text="Extension or extra calling instructions, ex: 'ext 36', or 'ask for the sales manager'", max_length=100, verbose_name='extra')),
                ('alert', models.CharField(blank=True, help_text='Important information about calling, such as "Don\'t call before 10:00am"', max_length=100, verbose_name='alert')),
                ('is_primary', models.BooleanField(default=False, help_text='If this is the primary number for voice', verbose_name='is primary')),
                ('person', models.ForeignKey(help_text='The person who is contaced with this number', on_delete=django.db.models.deletion.CASCADE, to='sdcpeople.person')),
            ],
        ),
        migrations.CreateModel(
            name='ContactText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='The phone number', max_length=50, verbose_name='number')),
                ('extra', models.CharField(blank=True, help_text="Extra texting instructions, such as 'Respond to challange after sending the text'", max_length=100, verbose_name='extra')),
                ('alert', models.CharField(blank=True, help_text='Important information about texting, such as "Don\'t text before 10:00am"', max_length=100, verbose_name='alert')),
                ('is_primary', models.BooleanField(default=False, help_text='If this is the primary number for text', verbose_name='is primary')),
                ('person', models.ForeignKey(help_text='The person who is contaced with this number', on_delete=django.db.models.deletion.CASCADE, to='sdcpeople.person')),
            ],
        ),
    ]
